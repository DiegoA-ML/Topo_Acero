# -*- coding: utf-8 -*-
"""Copy of IntentoLimpiezaDatos.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hJNiU1sVxRNJFUmMwTw9lQv8HBzUAO0f

# Loading and Cleaning

## Loading
"""

import pandas as pd

# Load the Excel file
file_path = "EditadoRetoTopo.xlsx"

# Read all sheet names
xls = pd.ExcelFile(file_path)
sheet_names = xls.sheet_names  # Get all sheet names

# Initialize empty lists to store dataframes
df_Prod_list = []
df_Impo_list = []
df_Expo_list = []
df_CNA_list = []

# Loop through each sheet
for sheet in sheet_names:
    df = pd.read_excel(file_path, sheet_name=sheet)
    df["Year"] = sheet

    # Split the dataframe into four parts based on columns
    df_Prod_list.append(df.iloc[:, :13])
    df_Impo_list.append(df.iloc[:, 13:25])
    df_Expo_list.append(df.iloc[:, 25:37])
    df_CNA_list.append(df.iloc[:, 37:])


# Concatenate dataframes for each category
df_Prod = pd.concat(df_Prod_list, ignore_index=True)
df_Impo = pd.concat(df_Impo_list, ignore_index=True)
df_Expo = pd.concat(df_Expo_list, ignore_index=True)
df_CNA = pd.concat(df_CNA_list, ignore_index=True)


# Add the first column of df_Prod to the other dataframes for the product names to be at the beginning of each dataframe.
df_Impo.insert(0, df_Prod.columns[0], df_Prod.iloc[:, 0])
df_Expo.insert(0, df_Prod.columns[0], df_Prod.iloc[:, 0])
df_CNA.insert(0, df_Prod.columns[0], df_Prod.iloc[:, 0])

# Insert the last column of df_CNA into the other dataframes
df_Prod["Year"] = df_CNA.iloc[:, -1]
df_Impo["Year"] = df_CNA.iloc[:, -1]
df_Expo["Year"] = df_CNA.iloc[:, -1]


# Display the first few rows of each dataframe (optional)
print("df_Prod:")
print(df_Prod.head())
print("\ndf_Impo:")
print(df_Impo.head())
print("\ndf_Expo:")
print(df_Expo.head())
print("\ndf_CNA:")
print(df_CNA.head())

"""## Cleaning"""

#Replace NaN values that are placeholders for 0 in original dataset.
df_Prod.fillna(0, inplace=True)
df_Impo.fillna(0, inplace=True)
df_Expo.fillna(0, inplace=True)
df_CNA.fillna(0, inplace=True)

#Also replace - in df, since its used as placeholder as well.
df_Prod.replace('-', 0, inplace=True)
df_Impo.replace('-', 0, inplace=True)
df_Expo.replace('-', 0, inplace=True)
df_CNA.replace('-', 0, inplace=True)

#Verify to see the rows of the datasets to see NaN values
print(df_Prod[df_Prod.isna().any(axis=1)])
print(df_Impo[df_Impo.isna().any(axis=1)])
print(df_Expo[df_Expo.isna().any(axis=1)])
print(df_CNA[df_CNA.isna().any(axis=1)])

"""# Graphs and Statistical Values of Products

## Graphs of Time Series
"""

import numpy as np
import matplotlib.pyplot as plt

#Each index represents a month for 2012-2024
indexes = [x for x in range(13*12)]

# Using globals() to find the name of a variable
def get_var_name(variable):
    for name, value in globals().items():
        if value is variable:
            return name
def time_series_plot(df):
  for i in range(52):#Number of products
    df.iloc[i,0] = df.iloc[i,0].replace(" ","_")#Replace all empty space to make the names of variable feasibles
    globals()[f'{df.iloc[i,0]}_{get_var_name(df)[3:]}'] = []#Make variables to access globally the values of the whole time series for each product. Names of the variables: ProductName_Dataframe of procedence(Prod, Expo, Impo or CNA)
    for j in range(13):#13 years to concatenate that are each
        globals()[f'{df.iloc[i,0]}_{get_var_name(df)[3:]}'].append(list(df.iloc[i+52*j,1:13]))#Change to lists.

    globals()[f'{df.iloc[i,0]}_{get_var_name(df)[3:]}'] = np.array(globals()[f'{df.iloc[i,0]}_{get_var_name(df)[3:]}']).flatten()#Flatten for same size with indexes
    plt.figure(figsize = (10,6))
    plt.plot(indexes,globals()[f'{df.iloc[i,0]}_{get_var_name(df)[3:]}'])
    plt.title(get_var_name(df)[3:] +'. 2012-2024:'+df.iloc[i,0])#df.iloc[i,0]
    plt.xlabel('Meses 2012-2024')
    plt.ylabel('Monto')

#Run function to graph all the products for each dataframe.
time_series_plot(df_Prod)
time_series_plot(df_Impo)
time_series_plot(df_Expo)
time_series_plot(df_CNA)

"""## Mean, Median and Mode"""

#Medidas de Tendencia Central: Mediana, Media
'''
a)Medidas de tendencia central: promedio, media, mediana y moda de los datos.
b)Medidas de dispersión: rango: máximo - mínimo, varianza, desviación estándar.
c)Medidas de posición no-central: cuartiles, outlier (valores atípicos), boxplots
d)Análisis de distribución de los datos (Histogramas). Identificar si tiene forma simétrica o asimétrica
e)Análisis de correlación  de los datos, mapa de calor
'''
#a,b y mitad c with df.transpose then df.describe
#c crear boxplots with seaborn or matplotlib
#d histogramas
#e matriz de correlacion y de calorimport seaborn as sns


#Build dataframes
def build_dataframe(df):
    # Create an empty dictionary to hold the series
    series_dict = {}

    # Iterate over the first 52 rows (as per your loop)
    for i in range(52):
        # Construct the key for the dictionary
        key = df.iloc[i, 0].replace(" ", "_")

        # Construct the series name dynamically
        series_name = f'{key}_{get_var_name(df)[3:]}'

        # Assign the series to the dictionary
        series_dict[series_name] = globals().get(series_name, None)

    return pd.DataFrame(series_dict)

import matplotlib.pyplot as plt
stats_Prod = build_dataframe(df_Prod).describe()
stats_Impo = build_dataframe(df_Impo).describe()
stats_Expo = build_dataframe(df_Expo).describe()
stats_CNA = build_dataframe(df_CNA).describe()
stats_Prod

stats_Impo

stats_Expo

stats_CNA

"""## Boxplots"""

import matplotlib.pyplot as plt
import seaborn as sns
#from matplotlib.patches import Patch
#Only used for stacked visualizations of boxplots

'''
colors = {
    "Prod": "skyblue",
    "Impo": "lightgreen",
    "Expo": "lightcoral",
    "CNA": "gold"
}
'''
def graph_boxplots(df,counter):
  plt.figure(figsize=(10, 6))  # Create a new figure
  sns.boxplot(data=globals()[f'{df.iloc[counter,0]}_{get_var_name(df)[3:]}'])
  plt.title(f"Boxplots for {f'{df.iloc[counter,0]}_{get_var_name(df)[3:]}'}")
  plt.xticks(rotation=45)
  plt.tight_layout()



# Graph boxplots for all products on the different dataframes.
for i in range(52):
    graph_boxplots(df_Prod,i)
    graph_boxplots(df_Impo,i)
    graph_boxplots(df_Expo,i)
    graph_boxplots(df_CNA,i)
    # Add
    '''
    In case a visualization of boxplots for each product is neede

    plt.figure(figsize=(10, 6))
    sns.boxplot(
        data=globals()[f'{df_Impo.iloc[i,0]}_{get_var_name(df_Impo)[3:]}'],
        color=colors["Prod"]
    )
    sns.boxplot(
        data=globals()[f'{df_Impo.iloc[i,0]}_{get_var_name(df_Impo)[3:]}'],
        color=colors["Impo"]
    )
    sns.boxplot(
        data=globals()[f'{df_Expo.iloc[i,0]}_{get_var_name(df_Expo)[3:]}'],
        color=colors["Expo"]
    )
    sns.boxplot(
        data=globals()[f'{df_CNA.iloc[i,0]}_{get_var_name(df_CNA)[3:]}'],
        color=colors["CNA"]
    )

    # Add title and layout
    plt.title(f"Boxplots for {df_Prod.iloc[i,0]}")
    plt.xticks(rotation=45)
    plt.tight_layout()

    # Create custom legend
    legend_elements = [
        Patch(facecolor=colors["Prod"], label="Producción"),
        Patch(facecolor=colors["Impo"], label="Importación"),
        Patch(facecolor=colors["Expo"], label="Exportación"),
        Patch(facecolor=colors["CNA"], label="Consumo")
    ]
    plt.legend(handles=legend_elements, title="Origen de Datos", loc="upper right")
    '''
    plt.show()

"""## Histograms"""

def graph_histograms(df,counter):
  plt.figure(figsize=(10, 6))  # Create a new figure
  plt.hist(globals()[f'{df.iloc[counter,0]}_{get_var_name(df)[3:]}'])
  plt.title(f"Boxplot: {f'{df.iloc[counter,0]}_{get_var_name(df)[3:]}'}")
  plt.xticks(rotation=45)
  plt.tight_layout()

for i in range(52):
    graph_histograms(df_Prod,i)
    graph_histograms(df_Impo,i)
    graph_histograms(df_Expo,i)
    graph_histograms(df_CNA,i)
    plt.show()

"""## Heatmaps and Correlation Matrix"""

import seaborn as sns
#Build dataframes
def build_dataframe(df):
    # Create an empty dictionary to hold the series
    series_dict = {}

    # Iterate over the first 52 rows (as per your loop)
    for i in range(52):
        # Construct the key for the dictionary
        key = df.iloc[i, 0].replace(" ", "_")

        # Construct the series name dynamically
        series_name = f'{key}_{get_var_name(df)[3:]}'

        # Assign the series to the dictionary
        series_dict[series_name] = globals().get(series_name, None)

    return pd.DataFrame(series_dict)
build_dataframe(df_Prod)
build_dataframe(df_Impo)
build_dataframe(df_Expo)
build_dataframe(df_CNA)

plt.figure(figsize=(20, 12))
sns.heatmap(build_dataframe(df_Prod).corr())

plt.figure(figsize=(20, 12))

sns.heatmap(build_dataframe(df_Impo).corr())

plt.figure(figsize=(20, 12))

sns.heatmap(build_dataframe(df_Expo).corr())

plt.figure(figsize=(20, 12))

sns.heatmap(build_dataframe(df_CNA).corr())

"""# Export Clean Dataframes"""

clean_df_Prod = build_dataframe(df_Prod)
clean_df_Impo = build_dataframe(df_Impo)
clean_df_Expo = build_dataframe(df_Expo)
clean_df_CNA = build_dataframe(df_CNA)

clean_df_Prod.to_excel('clean_df_Prod.xlsx', index=False)
clean_df_Impo.to_excel('clean_df_Impo.xlsx', index=False)
clean_df_Expo.to_excel('clean_df_Expo.xlsx', index=False)
clean_df_CNA.to_excel('clean_df_CNA.xlsx', index=False)

